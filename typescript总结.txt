1.-------------------------------------
但如果是 any 类型，则允许被赋值为任意类型。
let myFavoriteNumber: any = 'seven';
myFavoriteNumber = 7;
2.---------------------------------
任意值的属性和方法
在任意值上访问任何属性都是允许的：
let anyThing: any = 'hello';
console.log(anyThing.myName);
console.log(anyThing.myName.firstName);
也允许调用任何方法：
let anyThing: any = 'Tom';
anyThing.setName('Jerry');
anyThing.setName('Jerry').sayHello();
anyThing.myName.setFirstName('Cat');
3.----------------------------------------------
变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：
let something;
something = 'seven';
something = 7;
something.setName('Tom');
4.-------------------------------------------------
类型推论
如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的
规则推断出一个类型。
什么是类型推论
以下代码虽然没有指定类型，但是会在编译的时候报错：
let myFavoriteNumber = 'seven';
myFavoriteNumber = 7;
// index.ts(2,1): error TS2322: Type 'number' is not assignable
to type 'string'.
事实上，它等价于：
let myFavoriteNumber: string = 'seven';
myFavoriteNumber = 7;

如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全
不被类型检查：
let myFavoriteNumber;
myFavoriteNumber = 'seven';
myFavoriteNumber = 7;
5.----------------------------------------------------
联合类型（Union Types）表示取值可以为多种类型中的一种。
简单的例子
let myFavoriteNumber: string | number;
myFavoriteNumber = 'seven';
myFavoriteNumber = 7;
6.---------------------------------------------------
当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此
联合类型的所有类型里共有的属性或方法：
function getLength(something: string | number): number {
return something.length;
}
// index.ts(2,22): error TS2339: Property 'length' does not exis
t on type 'string | number'.
// Property 'length' does not exist on type 'number'.
上例中， length 不是 string 和 number 的共有属性，所以会报错。
访问 string 和 number 的共有属性是没问题的：
function getString(something: string | number): string {
return something.toString();
}
联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型：
let myFavoriteNumber: string | number;
myFavoriteNumber = 'seven';
console.log(myFavoriteNumber.length); // 5
myFavoriteNumber = 7;
console.log(myFavoriteNumber.length); // 编译时报错
// index.ts(5,30): error TS2339: Property 'length' does not exis
t on type 'number'.
上例中，第二行的 myFavoriteNumber 被推断成了 string ，访问它的
length 属性不会报错。
而第四行的 myFavoriteNumber 被推断成了 number ，访问它的 length 属
性时就报错了。
7.----------------------------------------------------------------------------------
interface Person {
name: string;
age: number;
}
let tom: Person = {
name: 'Tom',
age: 25
};
上面的例子中，我们定义了一个接口 Person ，接着定义了一个变量 tom ，它
的类型是 Person 。这样，我们就约束了 tom 的形状必须和接口 Person 一
致。
接口一般首字母大写。有的编程语言中会建议接口的名称加上 I 前缀。
8.-----------------------------------------------------------------------------------
可选属性
有时我们希望不要完全匹配一个形状，那么可以用可选属性：
interface Person {
name: string;
age?: number;
}
let tom: Person = {
name: 'Tom'
};
可选属性的含义是该属性可以不存在。
这时仍然不允许添加未定义的属性：
9.----------------------------------------------------------------------------------------
任意属性
有时候我们希望一个接口允许有任意的属性，可以使用如下方式：
interface Person {
name: string;
age?: number;
[propName: string]: any;
}
let tom: Person = {
name: 'Tom',
gender: 'male'
};
使用 [propName: string] 定义了任意属性取 string 类型的值。
需要注意的是，一旦定义了任意属性，那么确定属性和可选属性都必须是它的子属
性：
interface Person {
name: string;
age?: number;
[propName: string]: string;
}
let tom: Person = {
name: 'Tom',
age: 25,
gender: 'male'
};
// index.ts(3,5): error TS2411: Property 'age' of type 'number'
is not assignable to string index type 'string'.
// index.ts(7,5): error TS2322: Type '{ [x: string]: string | nu
mber; name: string; age: number; gender: string; }' is not assig
nable to type 'Person'.
// Index signatures are incompatible.
// Type 'string | number' is not assignable to type 'string'.
// Type 'number' is not assignable to type 'string'.
上例中，任意属性的值允许是 string ，但是可选属性 age 的值却是
number ， number 不是 string 的子属性，所以报错了。
另外，在报错信息中可以看出，此时 { name: 'Tom', age: 25, gender:
'male' } 的类型被推断成了 { [x: string]: string | number; name:
string; age: number; gender: string; } ，这是联合类型和接口的结合。
10.-----------------------------------------------------------------------------
有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用
readonly 定义只读属性：
interface Person {
readonly id: number;
name: string;
age?: number;
[propName: string]: any;
}
let tom: Person = {
id: 89757,
name: 'Tom',
gender: 'male'
};
tom.id = 9527;
// index.ts(14,5): error TS2540: Cannot assign to 'id' because i
t is a constant or a read-only property.
上例中，使用 readonly 定义的属性 id 初始化后，又被赋值了，所以报错
了。
11.------------------------------------------------------------------------------
interface Person {
readonly id: number;
name: string;
age?: number;
[propName: string]: any;
}
let tom: Person = {
name: 'Tom',
gender: 'male'
};
tom.id = 89757;
// index.ts(8,5): error TS2322: Type '{ name: string; gender: st
ring; }' is not assignable to type 'Person'.
// Property 'id' is missing in type '{ name: string; gender: s
tring; }'.
// index.ts(13,5): error TS2540: Cannot assign to 'id' because i
t is a constant or a read-only property.
上例中，报错信息有两处，第一处是在对 tom 进行赋值的时候，没有给 id 赋
值。
第二处是在给 tom.id 赋值的时候，由于它是只读属性，所以报错了。
12.----------------------------------------------数组类型-----------------------------
最简单的方法是使用「类型 + 方括号」来表示数组：
let fibonacci: number[] = [1, 1, 2, 3, 5];
数组的项中不允许出现其他的类型：
let fibonacci: number[] = [1, '1', 2, 3, 5];
上例中， [1, '1', 2, 3, 5] 的类型被推断为 (number | string)[] ，这是
联合类型和数组的结合。
数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：
let fibonacci: number[] = [1, 1, 2, 3, 5];
fibonacci.push('8');
13.-------------------------------------------------------------------------------------
也可以使用数组泛型（Array Generic） Array<elemType> 来表示数组：
let fibonacci: Array<number> = [1, 1, 2, 3, 5];
14.*****************************************************************************************
用接口表示数组
接口也可以用来描述数组：
interface NumberArray {
[index: number]: number;
}
let fibonacci: NumberArray = [1, 1, 2, 3, 5];
NumberArray 表示：只要 index 的类型是 number ，那么值的类型必须是
number 。
15.-----------------------------------------------------------------------------------------
any 在数组中的应用
一个比较常见的做法是，用 any 表示数组中允许出现任意类型：
let list: any[] = ['Xcat Liu', 25, { website: 'http://xcatliu.co
m' }];
16.-----------------------------------------------------------------------------------------
类数组
类数组（Array-like Object）不是数组类型，比如 arguments ：
数组的类型
35
function sum() {
let args: number[] = arguments;
}
// index.ts(2,7): error TS2322: Type 'IArguments' is not assigna
ble to type 'number[]'.
// Property 'push' is missing in type 'IArguments'.
事实上常见的类数组都有自己的接口定义，如 IArguments , NodeList ,
HTMLCollection 等：
function sum() {
let args: IArguments = arguments;
}
17.---------------------------------------------------------------------------------------------
一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考
虑到，其中函数声明的类型定义较简单：
function sum(x: number, y: number): number {
return x + y;
}
注意，输入多余的（或者少于要求的）参数，是不被允许的：
18.--------------------------------------------------------------------------------------------
函数表达式
如果要我们现在写一个对函数表达式（Function Expression）的定义，可能会写成
这样：
let mySum = function (x: number, y: number): number {
return x + y;
};
这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类
型定义，而等号左边的 mySum ，是通过赋值操作进行类型推论而推断出来的。如
果需要我们手动给 mySum 添加类型，则应该是这样：
let mySum: (x: number, y: number) => number = function (x: number
, y: number): number {
return x + y;
};
函数的类型
38
注意不要混淆了 TypeScript 中的 => 和 ES6 中的 => 。
在 TypeScript 的类型定义中， => 用来表示函数的定义，左边是输入类型，需要
用括号括起来，右边是输出类型。
19：-------------------------------------------------------------------------------------------
用接口定义函数的形状
我们也可以使用接口的方式来定义一个函数需要符合的形状：
interface SearchFunc {
(source: string, subString: string): boolean;
}
let mySearch: SearchFunc;
mySearch = function(source: string, subString: string) {
return source.search(subString) !== -1;
}
20.-----------------------------------------------------------------------------------------------
可选参数
前面提到，输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选
的参数呢？
与接口中的可选属性类似，我们用 ? 表示可选的参数：
function buildName(firstName: string, lastName?: string) {
if (lastName) {
return firstName + ' ' + lastName;
} else {
return firstName;
}
}
let tomcat = buildName('Tom', 'Cat');
let tom = buildName('Tom');
函数的类型
39
需要注意的是，可选参数必须接在必需参数后面。换句话说，可选参数后面不允许
再出现必须参数了：
function buildName(firstName?: string, lastName: string) {
if (firstName) {
return firstName + ' ' + lastName;
} else {
return lastName;
}
}
let tomcat = buildName('Tom', 'Cat');
let tom = buildName(undefined, 'Tom');
// index.ts(1,40): error TS1016: A required parameter cannot fol
low an optional parameter.
21.---------------------------------------------------------------------------
参数默认值
在 ES6 中，我们允许给函数的参数添加默认值，TypeScript 会将添加了默认值的
参数识别为可选参数：
function buildName(firstName: string, lastName: string = 'Cat')
{
return firstName + ' ' + lastName;
}
let tomcat = buildName('Tom', 'Cat');
let tom = buildName('Tom');
此时就不受「可选参数必须接在必需参数后面」的限制了：
22.-----------------------------------重载---------------------------------------
重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。
     function reverse(x: number): number;
        function reverse(x: string): string;
        function reverse(x: number | string): number | string {
        if (typeof x === 'number') {
        return Number(x.toString().split('').reverse().join(''))
        ;
        } else if (typeof x === 'string') {
        return x.split('').reverse().join('');
        }
        }
        reverse("1212121")
//上例中，我们重复定义了多次函数 reverse ，前几次都是函数定义，最后一次是
////函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。
//注意，TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有
//包含关系，需要优先把精确的定义写在前面。
23.--------------------------------------------------------------------------------
类型断言
类型断言（Type Assertion）可以用来手动指定一个值的类型。
  //类型断言
        function GetLength(something:string|number):number{
            if((<string>something).length){
                return (<string>something).length;
            }else {
                return something.toString().length;
            }
        }
        //类型断言的用法如上，在需要断言的变量前加上 <Type> 即可。
//类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的：
function toBoolean(something: string | number): boolean {
    return <boolean>something;
    }
24.-----------------------------------------------声明第三方库-------------------
通常我们会把类型声明放到一个单独的文件中，这就是声明文件：
// jQuery.d.ts
declare var jQuery: (string) => any;
我们约定声明文件以 .d.ts 为后缀。
然后在使用到的文件的开头，用「三斜线指令」表示引用了声明文件：
/// <reference path="./jQuery.d.ts" />
jQuery('#foo');
25.-------------------------------------------------------------------------------------
字符串字面量类型
字符串字面量类型用来约束取值只能是某几个字符串中的一个。
简单的例子
type EventNames = 'click' | 'scroll' | 'mousemove';
function handleEvent(ele: Element, event: EventNames) {
// do something
}
handleEvent(document.getElementById('hello'), 'scroll'); // 没问题
handleEvent(document.getElementById('world'), 'dbclick'); // 报错
，event 不能为 'dbclick'
26.--------------------元组---------------------------------------------------------------
元组
数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象。
元组起源于函数编程语言（如 F#）,在这些语言中频繁使用元组。
定义一对值分别为 string 和 number 的元组：
let xcatliu: [string, number] = ['Xcat Liu', 25];
 //但是当直接对元组类型的变量进行初始化或者赋值的时候，需要提供所有元组类型中指定的项。
 let xcatliu: [string, number];
 xcatliu = ['Xcat Liu', 25];
 xcatliu.push(26);
27.---------------------------------------枚举enum-------------------------------------------
枚举使用 enum 关键字来定义：
enum Days {Sun, Mon, Tue, Wed, Thu, Fri, Sat};
枚举成员会被赋值为从 0 开始递增的数字，同时也会对枚举值到枚举名进行反向
映射：
enum Days {Sun, Mon, Tue, Wed, Thu, Fri, Sat};
console.log(Days["Sun"] === 0); // true
console.log(Days["Mon"] === 1); // true
console.log(Days["Tue"] === 2); // true
console.log(Days["Sat"] === 6); // true
console.log(Days[0] === "Sun"); // true
console.log(Days[1] === "Mon"); // true
console.log(Days[2] === "Tue"); // true
console.log(Days[6] === "Sat"); // true
28.-----------------------------------------常数枚举---------------------------------
常数枚举
常数枚举是使用 const enum 定义的枚举类型：
const enum Directions {
Up,
Down,
Left,
Right
}
let directions = [Directions.Up, Directions.Down, Directions.Lef
t, Directions.Right];
常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员。
29.-----------------------------------------类--------------------------------------------
类的概念
虽然 JavaScript 中有类的概念，但是可能大多数 JavaScript 程序员并不是非常熟
悉类，这里对类相关的概念做一个简单的介绍。
类(Class)：定义了一件事物的抽象特点，包含它的属性和方法
对象（Object）：类的实例，通过 new 生成
面向对象（OOP）的三大特性：封装、继承、多态
封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。
外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该
对象，同时也保证了外界无法任意更改对象内部的数据
继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有
一些更具体的特性
多态（Polymorphism）：由继承而产生了相关的不同的类，对同一个方法可以
有不同的响应。比如 Cat 和 Dog 都继承自 Animal ，但是分别实现了自
己的 eat 方法。此时针对某一个实例，我们无需了解它是 Cat 还是
Dog ，就可以直接调用 eat 方法，程序会自动判断出来应该如何执行
eat
存取器（getter & setter）：用以改变属性的读取和赋值行为
修饰符（Modifiers）：修饰符是一些关键字，用于限定成员或类型的性质。比
如 public 表示公有属性或方法
抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被
实例化。抽象类中的抽象方法必须在子类中被实现
接口（Interfaces）：不同类之间公有的属性或方法，可以抽象成一个接口。接
口可以被类